<project name="WS Edit Build" default="build">
	<property name="configuration" value="release"/>

	<target name="clean" description="Delete all previously compiled binaries.">
		<delete>
			<fileset>
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="../output/**" />
				<include name="../release/output/*" />
				<exclude name=".hg" />
			</fileset>
		</delete>
	</target>

	<target name="revision_teamcityhg">
		<property name="teamcity" value="${environment::get-variable('BUILD_NUMBER')}" />
		<regex pattern="^(?'revision'[^:-]*)" input="${teamcity}" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
	</target>

	<target name="version" depends="revision_teamcityhg">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../src/**/AssemblyInfo.cs" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
				</script>
			</do>
		</foreach>
	</target>

	<target name="build" description="Build all targets.">
		<call target="build.solution"/>
	</target>

	<target name="rebuild" depends="clean, build" />

	<target name="build.solution" depends="assemblyinfo">
		<solution configuration="${configuration}" solutionfile="../wsedit.sln">
		</solution>
		<property name="expected.output" value="../output/${configuration}/wsedit.exe"/>
		<fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
	</target>

	<target name="test" depends="build">
		<nunit2>
			<formatter type="Plain" usefile="true" />
			<test>
				<assemblies>
					<include name="../output/${configuration}/*Tests.dll" />
				</assemblies>
			</test>
		</nunit2>
	</target>

	<target name="installerpre" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${filename}" tofile="${backupname}" overwrite="true" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true">
					<filterchain>
						<expandproperties />
					</filterchain>
				</copy>
			</do>
		</foreach>
	</target>

	<target name="installerpost">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true" />
				<delete file="${backupname}" />
			</do>
		</foreach>
	</target>

	<target name="installer.win">
		<exec program="C:\Program Files\Inno Setup 5\ISCC.exe" append="true">
			<arg file="../release/setup.iss" />
		</exec>
	</target>

	<target name="installer" depends="build">
		<call target="installerpre" />
		<call target="installer.win" />
		<call target="installerpost" />
	</target>

	<target name="publish.ftp" depends="installer">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="ftp.txt" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'txt', 'run')}" />
				<copy file="${filename}" tofile="${backupname}" overwrite="true">
					<filterchain>
						<expandproperties />
					</filterchain>
				</copy>
				<exec program="ftp.exe">
					<arg line="-n -s:${backupname}" />
				</exec>
				<delete file="${backupname}" />
			</do>
		</foreach>
	</target>

  <target name="MakeDownloadPointers" depends="version" >

	<!-- copy it so we aren't modifying the original, which then is a pain on dev machines -->
	<copy file="..\release\DownloadPointers.htm" tofile="..\release\output\DownloadPointers.htm" overwrite="true" />

	<tstamp property="build.date" pattern="dd/MMM/yyyy" verbose="true" />

	<!-- replace some parts of the file with the version number & date -->
	<!-- don't know how to do this in nant, and not the time to port to msbuild
	<FileUpdate File="$(teamcity_build_checkoutDir)\output\Installer\DownloadPointers.htm"
				DatePlaceholder='DEV_RELEASE_DATE'
				Regex='DEV_VERSION_NUMBER'
				ReplacementText="$(Version)" />
	-->

			<loadfile file="..\release\output\DownloadPointers.htm" property="token-file">
				<filterchain>
					<replacetokens>
						<token key="DEV_RELEASE_DATE" value="${build.date}" />
						<token key="DEV_VERSION_NUMBER'" value="${version}" />
					</replacetokens>
				</filterchain>
			</loadfile>

	<!-- push up to the web so that on our downloads page, we can give a link to the latest version -->
				<exec program="c:\program files\cwRsync\bin\rsync.exe">
						<arg line='-vz -p --chmod=ug+rw -e"\"c:\program files\cwRsync\bin\ssh\" -oUserKnownHostsFile=C:\BuildAgent\conf\known_hosts -oIdentityFile=C:\BuildAgent\conf\bob.key -l bob"  "../release/Output/DownloadPointers.htm" bob@wesay.org:/var/www/downloads/wsedit/download.htm' />
				</exec>
  </target>

		<target name="publish.rsync" depends="installer" >
				<exec program="c:\program files\cwRsync\bin\rsync.exe">
						<arg line='-vz -p --chmod=ug+rw -e"\"c:\program files\cwRsync\bin\ssh\" -oUserKnownHostsFile=C:\BuildAgent\conf\known_hosts -oIdentityFile=C:\BuildAgent\conf\bob.key -l bob"  "../release/Output/WSEditSetup.exe" bob@wesay.org:/var/www/downloads/wsedit/WSEditSetup_${version}.exe' />
				</exec>
		<call target="MakeDownloadPointers" />
		</target>

		<target name="publish.altbuild" depends="installer" >
				<exec program="c:\program files\cwRsync\bin\rsync.exe">
						<arg line='-vz -p --chmod=ug+rw -e"\"c:\program files\cwRsync\bin\ssh\" -oUserKnownHostsFile=C:\BuildAgent\conf\known_hosts -oIdentityFile=C:\BuildAgent\conf\bob.key -l bob"  "../release/Output/WSEditSetup.exe" bob@wesay.org:/var/www/downloads/wsedit/WSEditSetup-alt_${version}.exe' />
				</exec>
		</target>

	<target name="publish" depends="installer">
		<property name="publish.host" value="palaso.org" />
		<property name="publish.src" value="../release/Output/WSEditSetup.exe" />
		<property name="publish.dst" value="htdocs/install/wsedit/WSEditSetup_${version}.exe" />
		<call target="publish.ftp" />
	</target>

</project>
